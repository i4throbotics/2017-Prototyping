// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.




#include "Chassis.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/DriveWithJoystick.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

Chassis::Chassis() : Subsystem("Chassis") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    frontLeft = RobotMap::chassisFrontLeft;
    frontRight = RobotMap::chassisFrontRight;
    backLeft = RobotMap::chassisBackLeft;
    backRight = RobotMap::chassisBackRight;
    robotDrive = RobotMap::chassisRobotDrive;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	FLEncoder = RobotMap::chassisFrontLeftEncoder;
	BLEncoder = RobotMap::chassisFrontRightEncoder;
	FREncoder = RobotMap::chassisBackLeftEncoder;
	BREncoder = RobotMap::chassisBackRightEncoder;
}

void Chassis::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new DriveWithJoystick());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}


// Put methods for controlling this subsystem
// here. Call these from Commands.

void Chassis::Drive(){
	double moveValue=Robot::oi->getAxis(0);
	double rotateValue=Robot::oi->getAxis(1);
	bool squaredInputs=true;

	  // local variables to hold the computed PWM values for the motors
	  float leftMotorOutput;
	  float rightMotorOutput;

	  //moveValue = robotDrive->Limit(moveValue);
	  //rotateValue = robotDrive->Limit(rotateValue);

	  if (squaredInputs) {
	    // square the inputs (while preserving the sign) to increase fine control
	    // while permitting full power
	    if (moveValue >= 0.0) {
	      moveValue = (moveValue * moveValue);
	    } else {
	      moveValue = -(moveValue * moveValue);
	    }
	    if (rotateValue >= 0.0) {
	      rotateValue = (rotateValue * rotateValue);
	    } else {
	      rotateValue = -(rotateValue * rotateValue);
	    }
	  }

	  if (moveValue > 0.0) {
	    if (rotateValue > 0.0) {
	      leftMotorOutput = moveValue - rotateValue;
	      rightMotorOutput = std::max(moveValue, rotateValue);
	    } else {
	      leftMotorOutput = std::max(moveValue, -rotateValue);
	      rightMotorOutput = moveValue + rotateValue;
	    }
	  } else {
	    if (rotateValue > 0.0) {
	      leftMotorOutput = -std::max(-moveValue, rotateValue);
	      rightMotorOutput = moveValue + rotateValue;
	    } else {
	      leftMotorOutput = moveValue - rotateValue;
	      rightMotorOutput = -std::max(-moveValue, -rotateValue);
	    }
	  }
	  frontLeft->Set(-leftMotorOutput);
	  frontRight->Set(-rightMotorOutput);
	  backLeft->Set(-leftMotorOutput);
	  backRight->Set(-rightMotorOutput);
}
double Chassis::GetBLEncoder(){
		return BLEncoder->Get();
	}
double Chassis::GetFLEncoder(){
		return FLEncoder->Get();
	}
double Chassis::GetBREncoder(){
		return BREncoder->Get();
	}
double Chassis::GetFREncoder(){
		return FREncoder->Get();
	}
void Chassis::ResetBLEncoder(){
	BLEncoder->Reset();
}
void Chassis::ResetFLEncoder(){
	FLEncoder->Reset();
}
void Chassis::ResetBREncoder(){
	BREncoder->Reset();
}
void Chassis::ResetFREncoder(){
	FREncoder->Reset();
}
double Chassis::GetBLSpeed(){
	return backLeft->Get();
}
double Chassis::GetBRSpeed(){
	return backRight->Get();
}
double Chassis::GetFLSpeed(){
	return frontLeft->Get();
}
double Chassis::GetFRSpeed(){

	return frontRight->Get();
}

void Chassis::SetBLSpeed(double speed){
	backLeft->Set(speed);
}
void Chassis::SetBRSpeed(double speed){
	backRight->Set(-speed);
}
void Chassis::SetFLSpeed(double speed){
	frontLeft->Set(speed);
}
void Chassis::SetFRSpeed(double speed){
	frontRight->Set(-speed);
}
void Chassis::AutoDrive(double speed){
	frontLeft->Set(-speed);
	frontRight->Set(speed);
	backLeft->Set(-speed);
	backRight->Set(speed);
}

